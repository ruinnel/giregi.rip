// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ArchiveTagMapping is an object representing the database table.
type ArchiveTagMapping struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TagID     int64     `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	ArchiveID int64     `boil:"archive_id" json:"archive_id" toml:"archive_id" yaml:"archive_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *archiveTagMappingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L archiveTagMappingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArchiveTagMappingColumns = struct {
	ID        string
	TagID     string
	ArchiveID string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	TagID:     "tag_id",
	ArchiveID: "archive_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ArchiveTagMappingWhere = struct {
	ID        whereHelperint64
	TagID     whereHelperint64
	ArchiveID whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`archive_tag_mappings`.`id`"},
	TagID:     whereHelperint64{field: "`archive_tag_mappings`.`tag_id`"},
	ArchiveID: whereHelperint64{field: "`archive_tag_mappings`.`archive_id`"},
	CreatedAt: whereHelpertime_Time{field: "`archive_tag_mappings`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`archive_tag_mappings`.`updated_at`"},
}

// ArchiveTagMappingRels is where relationship names are stored.
var ArchiveTagMappingRels = struct {
	Archive string
	Tag     string
}{
	Archive: "Archive",
	Tag:     "Tag",
}

// archiveTagMappingR is where relationships are stored.
type archiveTagMappingR struct {
	Archive *Archive `boil:"Archive" json:"Archive" toml:"Archive" yaml:"Archive"`
	Tag     *Tag     `boil:"Tag" json:"Tag" toml:"Tag" yaml:"Tag"`
}

// NewStruct creates a new relationship struct
func (*archiveTagMappingR) NewStruct() *archiveTagMappingR {
	return &archiveTagMappingR{}
}

// archiveTagMappingL is where Load methods for each relationship are stored.
type archiveTagMappingL struct{}

var (
	archiveTagMappingAllColumns            = []string{"id", "tag_id", "archive_id", "created_at", "updated_at"}
	archiveTagMappingColumnsWithoutDefault = []string{"tag_id", "archive_id"}
	archiveTagMappingColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	archiveTagMappingPrimaryKeyColumns     = []string{"id"}
)

type (
	// ArchiveTagMappingSlice is an alias for a slice of pointers to ArchiveTagMapping.
	// This should generally be used opposed to []ArchiveTagMapping.
	ArchiveTagMappingSlice []*ArchiveTagMapping

	archiveTagMappingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	archiveTagMappingType                 = reflect.TypeOf(&ArchiveTagMapping{})
	archiveTagMappingMapping              = queries.MakeStructMapping(archiveTagMappingType)
	archiveTagMappingPrimaryKeyMapping, _ = queries.BindMapping(archiveTagMappingType, archiveTagMappingMapping, archiveTagMappingPrimaryKeyColumns)
	archiveTagMappingInsertCacheMut       sync.RWMutex
	archiveTagMappingInsertCache          = make(map[string]insertCache)
	archiveTagMappingUpdateCacheMut       sync.RWMutex
	archiveTagMappingUpdateCache          = make(map[string]updateCache)
	archiveTagMappingUpsertCacheMut       sync.RWMutex
	archiveTagMappingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single archiveTagMapping record from the query.
func (q archiveTagMappingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ArchiveTagMapping, error) {
	o := &ArchiveTagMapping{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for archive_tag_mappings")
	}

	return o, nil
}

// All returns all ArchiveTagMapping records from the query.
func (q archiveTagMappingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArchiveTagMappingSlice, error) {
	var o []*ArchiveTagMapping

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to ArchiveTagMapping slice")
	}

	return o, nil
}

// Count returns the count of all ArchiveTagMapping records in the query.
func (q archiveTagMappingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count archive_tag_mappings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q archiveTagMappingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if archive_tag_mappings exists")
	}

	return count > 0, nil
}

// Archive pointed to by the foreign key.
func (o *ArchiveTagMapping) Archive(mods ...qm.QueryMod) archiveQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ArchiveID),
	}

	queryMods = append(queryMods, mods...)

	query := Archives(queryMods...)
	queries.SetFrom(query.Query, "`archives`")

	return query
}

// Tag pointed to by the foreign key.
func (o *ArchiveTagMapping) Tag(mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "`tags`")

	return query
}

// LoadArchive allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (archiveTagMappingL) LoadArchive(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArchiveTagMapping interface{}, mods queries.Applicator) error {
	var slice []*ArchiveTagMapping
	var object *ArchiveTagMapping

	if singular {
		object = maybeArchiveTagMapping.(*ArchiveTagMapping)
	} else {
		slice = *maybeArchiveTagMapping.(*[]*ArchiveTagMapping)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveTagMappingR{}
		}
		args = append(args, object.ArchiveID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveTagMappingR{}
			}

			for _, a := range args {
				if a == obj.ArchiveID {
					continue Outer
				}
			}

			args = append(args, obj.ArchiveID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`archives`),
		qm.WhereIn(`archives.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Archive")
	}

	var resultSlice []*Archive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Archive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for archives")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for archives")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Archive = foreign
		if foreign.R == nil {
			foreign.R = &archiveR{}
		}
		foreign.R.ArchiveTagMappings = append(foreign.R.ArchiveTagMappings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArchiveID == foreign.ID {
				local.R.Archive = foreign
				if foreign.R == nil {
					foreign.R = &archiveR{}
				}
				foreign.R.ArchiveTagMappings = append(foreign.R.ArchiveTagMappings, local)
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (archiveTagMappingL) LoadTag(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArchiveTagMapping interface{}, mods queries.Applicator) error {
	var slice []*ArchiveTagMapping
	var object *ArchiveTagMapping

	if singular {
		object = maybeArchiveTagMapping.(*ArchiveTagMapping)
	} else {
		slice = *maybeArchiveTagMapping.(*[]*ArchiveTagMapping)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &archiveTagMappingR{}
		}
		args = append(args, object.TagID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &archiveTagMappingR{}
			}

			for _, a := range args {
				if a == obj.TagID {
					continue Outer
				}
			}

			args = append(args, obj.TagID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tags`),
		qm.WhereIn(`tags.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &tagR{}
		}
		foreign.R.ArchiveTagMappings = append(foreign.R.ArchiveTagMappings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.ArchiveTagMappings = append(foreign.R.ArchiveTagMappings, local)
				break
			}
		}
	}

	return nil
}

// SetArchive of the archiveTagMapping to the related item.
// Sets o.R.Archive to related.
// Adds o to related.R.ArchiveTagMappings.
func (o *ArchiveTagMapping) SetArchive(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Archive) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `archive_tag_mappings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"archive_id"}),
		strmangle.WhereClause("`", "`", 0, archiveTagMappingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArchiveID = related.ID
	if o.R == nil {
		o.R = &archiveTagMappingR{
			Archive: related,
		}
	} else {
		o.R.Archive = related
	}

	if related.R == nil {
		related.R = &archiveR{
			ArchiveTagMappings: ArchiveTagMappingSlice{o},
		}
	} else {
		related.R.ArchiveTagMappings = append(related.R.ArchiveTagMappings, o)
	}

	return nil
}

// SetTag of the archiveTagMapping to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.ArchiveTagMappings.
func (o *ArchiveTagMapping) SetTag(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `archive_tag_mappings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tag_id"}),
		strmangle.WhereClause("`", "`", 0, archiveTagMappingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &archiveTagMappingR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			ArchiveTagMappings: ArchiveTagMappingSlice{o},
		}
	} else {
		related.R.ArchiveTagMappings = append(related.R.ArchiveTagMappings, o)
	}

	return nil
}

// ArchiveTagMappings retrieves all the records using an executor.
func ArchiveTagMappings(mods ...qm.QueryMod) archiveTagMappingQuery {
	mods = append(mods, qm.From("`archive_tag_mappings`"))
	return archiveTagMappingQuery{NewQuery(mods...)}
}

// FindArchiveTagMapping retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArchiveTagMapping(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ArchiveTagMapping, error) {
	archiveTagMappingObj := &ArchiveTagMapping{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `archive_tag_mappings` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, archiveTagMappingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from archive_tag_mappings")
	}

	return archiveTagMappingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ArchiveTagMapping) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no archive_tag_mappings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(archiveTagMappingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	archiveTagMappingInsertCacheMut.RLock()
	cache, cached := archiveTagMappingInsertCache[key]
	archiveTagMappingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			archiveTagMappingAllColumns,
			archiveTagMappingColumnsWithDefault,
			archiveTagMappingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(archiveTagMappingType, archiveTagMappingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(archiveTagMappingType, archiveTagMappingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `archive_tag_mappings` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `archive_tag_mappings` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `archive_tag_mappings` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, archiveTagMappingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into archive_tag_mappings")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == archiveTagMappingMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for archive_tag_mappings")
	}

CacheNoHooks:
	if !cached {
		archiveTagMappingInsertCacheMut.Lock()
		archiveTagMappingInsertCache[key] = cache
		archiveTagMappingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ArchiveTagMapping.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ArchiveTagMapping) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	archiveTagMappingUpdateCacheMut.RLock()
	cache, cached := archiveTagMappingUpdateCache[key]
	archiveTagMappingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			archiveTagMappingAllColumns,
			archiveTagMappingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update archive_tag_mappings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `archive_tag_mappings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, archiveTagMappingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(archiveTagMappingType, archiveTagMappingMapping, append(wl, archiveTagMappingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update archive_tag_mappings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for archive_tag_mappings")
	}

	if !cached {
		archiveTagMappingUpdateCacheMut.Lock()
		archiveTagMappingUpdateCache[key] = cache
		archiveTagMappingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q archiveTagMappingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for archive_tag_mappings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for archive_tag_mappings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArchiveTagMappingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), archiveTagMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `archive_tag_mappings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, archiveTagMappingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in archiveTagMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all archiveTagMapping")
	}
	return rowsAff, nil
}

var mySQLArchiveTagMappingUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ArchiveTagMapping) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no archive_tag_mappings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(archiveTagMappingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLArchiveTagMappingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	archiveTagMappingUpsertCacheMut.RLock()
	cache, cached := archiveTagMappingUpsertCache[key]
	archiveTagMappingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			archiveTagMappingAllColumns,
			archiveTagMappingColumnsWithDefault,
			archiveTagMappingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			archiveTagMappingAllColumns,
			archiveTagMappingPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("mysql: unable to upsert archive_tag_mappings, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "archive_tag_mappings", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `archive_tag_mappings` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(archiveTagMappingType, archiveTagMappingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(archiveTagMappingType, archiveTagMappingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for archive_tag_mappings")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == archiveTagMappingMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(archiveTagMappingType, archiveTagMappingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for archive_tag_mappings")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for archive_tag_mappings")
	}

CacheNoHooks:
	if !cached {
		archiveTagMappingUpsertCacheMut.Lock()
		archiveTagMappingUpsertCache[key] = cache
		archiveTagMappingUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ArchiveTagMapping record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ArchiveTagMapping) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no ArchiveTagMapping provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), archiveTagMappingPrimaryKeyMapping)
	sql := "DELETE FROM `archive_tag_mappings` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from archive_tag_mappings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for archive_tag_mappings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q archiveTagMappingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no archiveTagMappingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from archive_tag_mappings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for archive_tag_mappings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArchiveTagMappingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), archiveTagMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `archive_tag_mappings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, archiveTagMappingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from archiveTagMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for archive_tag_mappings")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ArchiveTagMapping) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArchiveTagMapping(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArchiveTagMappingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArchiveTagMappingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), archiveTagMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `archive_tag_mappings`.* FROM `archive_tag_mappings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, archiveTagMappingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in ArchiveTagMappingSlice")
	}

	*o = slice

	return nil
}

// ArchiveTagMappingExists checks if the ArchiveTagMapping row exists.
func ArchiveTagMappingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `archive_tag_mappings` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if archive_tag_mappings exists")
	}

	return exists, nil
}
